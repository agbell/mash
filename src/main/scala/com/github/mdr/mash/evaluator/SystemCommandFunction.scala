package com.github.mdr.mash.evaluator

import com.github.mdr.mash.functions.{ MashFunction, Parameter, ParameterModel }
import com.github.mdr.mash.runtime.{ MashList, MashString, MashUnit }
import com.github.mdr.mash.subprocesses.ProcessRunner

/**
 * A function generated by the "!nano" syntax
 */
case class SystemCommandFunction(command: String) extends MashFunction(nameOpt = None) {

  object Params {
    val Args = Parameter("args", "Arguments", isVariadic = true)
  }
  import Params._

  val params = ParameterModel(Seq(Args))

  def apply(arguments: Arguments): MashUnit = {
    val boundParams = params.validate(arguments)
    val args = boundParams(Args) match {
      case MashList(xs: MashList) ⇒ xs.elements
      case xs: MashList           ⇒ xs.elements
      case x                      ⇒ Seq(x)
    }
    ProcessRunner.runProcess(MashString(command) +: args)
    MashUnit
  }

  override def summary = s"Call the system command '$command'"

}