namespace mash.release

def getVersion = read "build.sbt" | 'version := "(.+)"'.r.match | .groups.first

def setVersion version =
  read "build.sbt"
    | .replace --regex 'version := "(.+)"' "version := `"$version`""
    | write "build.sbt"

def prepareBuildSbt = {
  current = getVersion
  if not (current.endsWith "-SNAPSHOT") then
    error "Current version is not a SNAPSHOT: $current"
  release = current.replace "-SNAPSHOT" ""

  print "Updating build.sbt to $release"
  setVersion release

  newPoint = release.split(".").last.toNumber + 1
  new = "0.0.$newPoint-SNAPSHOT"
  { current, release, new }
}

def createGithubRelease releaseVersion = {
  releasesUrl = "https://api.github.com/repos/mdr/mash/releases"
  name = "v$releaseVersion"
  body = { tag_name: name, name, prerelease: true }
  token = readLines "~/.mash/mdr-github-token" | first
  response = http.post releasesUrl --headers={ Authorization: "bearer $token" } --json body
  if response.succeeded then {
    print "Released mash $name"
    uploadUrl = response.json.upload_url.replace --regex"\{\?.+\}" ""
    jar = "mash-${releaseVersion}.jar"
    print "Uploading $jar"
    !!{curl -X POST --header "Authorization:bearer $token" --header "Content-Type:application/octet-stream" --data-binary "@target/scala-2.12/$jar" "$uploadUrl?name=$jar"}
    print "Uploading $deb"
    deb = "mash_${releaseVersion}_all.deb"
    !!{curl -X POST --header "Authorization:bearer $token" --header "Content-Type:application/octet-stream" --data-binary "@target/$deb" "$uploadUrl?name=$deb"}
    response.json.html_url
  } else
    error "Problem creating release: $response"

}

def getRelease version = {
  releasesUrl = "https://api.github.com/repos/mdr/mash/releases"
  token = readLines "~/.mash/mdr-github-token" | first
  json.get --headers={ Authorization: "bearer $token" } "$releasesUrl/v$version"
}
